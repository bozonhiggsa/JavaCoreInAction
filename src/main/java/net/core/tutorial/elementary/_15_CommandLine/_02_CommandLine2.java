package net.core.tutorial.elementary._15_CommandLine;

/**

 архив jar.

 jar-файл – это Java-архив (Java ARchive). Представляет собой ZIP-архив, в котором содержится программа на языке Java.
 jar-файл может быть просто набором классов, т.е. библиотекой. Такой jar элементарно получить при помощи Maven.
 Чтобы jar-файл был исполняемым, он должен содержать файл MANIFEST.MF в каталоге META-INF, в котором должен быть
 указан главный класс программы (такой класс должен содержать метод main и задаватьтся параметром Main-Class).
 Номер версии jar задаётся параметром Manifest-Version и является обязательным.

 Пример файла MANIFEST.MF:

 Manifest-Version: 1.0
 Archiver-Version: Plexus Archiver
 Created-By: Apache Maven
 Built-By: Ihor
 Build-Jdk: 1.8.0_162
 Main-Class: net.core.tutorial.elementary._15_CommandLine._02_CommandLine2

 Команда для запуска

 java -jar имя_файла
 (согласно манифест-файлу запустится метод с сигнатурой public static void main(String[] args) класса
 net.core.tutorial.elementary._15_CommandLine._02_CommandLine2):

 Для запуска класса, содержащегося в архиве:

 java -classpath имя_файла имя_класса

 Создать исполняемый jar-файл легко при помощи Maven, прописав секцию <packaging>jar</packaging>.

 Перед тем как начать выполнение программы JVM анализирует её код. Она читает секции import, сигнатуры методов и т.д.
 Когда она встречает упоминание какого-нибудь класса (неважно, будет ли создан его объект, допустим это просто класс
 возвращаемой методом переменной), то JVM ищет байт-коды (откомпилированные) данного класса в classpath
 (файл .class в папке проекта или в jar-файле). Если байт-кодов упоминаемого класса нет, то кидается ClassNotFoundException.
 Если байт-коды найдены, то JVM проверяет не битые ли они, а затем загружает в PermGen. jar-файл может содержать множество
 откомпилированных классов, библиотек классов, но загрузятся в PermGen лишь байт-коды тех классов, которые упоминаются в программе.
 В PermGen создаётся для каждого класса объект типа Class. В этом объекте сохраняются байт-коды методов
 (неважно, статических или нестатических) и полей (у всех объектов программ Java значения полей разные (хранятся отдельно в Heap),
 но байт-коды полей и методов одинаковые). А также в PermGen записываются значения всех статических полей.
 Момент создания статических полей точно не определён. Приближённо можно считать, что статические поля
 (включая значения полей) создаются в PermGen после запуска метода main, когда в коде встречается соответствующая инструкция.

 -----------------------------------------------------------------------------------------------------------------------
 Утилита jar.

 В файле .jar можно объединить исходные файлы .java, откомпилированные файлы .class, различные ресурсы, необходимые
 программе для работы (изображения, текстовые файлы, звуковые файлы и т.д.), документацию по работе с программным продуктом,
 конфигурационные параметры.
 Для того, чтобы вывести в командную строку подсказку по опциям утилиты архиватора необходимо набрать jar.
 Из подсказки следует, что формат вызова утилиты следующий:

 jar <ctxui>[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files...

 а основные команды такие:

 -c  Создание нового архива
 -u  Обновление существующего архива
 -t   Выдать на консоль список содержимого архива
 -x  Извлечь названия файлов из архива
 -v  Сгенерировать множественный выход на стандартный выход (вывести результаты архивации на экран командной строки)
 -f   Определить название файла архива
 -m  Включить информацию манифеста из определённого файла Manifest
 -e   Определить точку входа в приложение для одиночного приложения, упакованного в исполняемый .jar.
 -0   не использовать сжатие zip.
 -C   Изменить определённую директорию и включить в неё следующий файл

 Пример 1:

 jar cvf classes.jar Foo.class Bar.class

 Создание нового архива с именем classes.jar из откомпилированных файлов Foo.class и Bar.class.

 Пример 2:

 jar cvf classes.jar src/p25m/*.java out/production/p25/p25m/*.class

 Создание нового архива с именем classes.jar из всех, имеющихся в указанных директориях файлов .java и .class.
 Чтобы просмотреть содержимое classes.jar можно переименовать его расширение в zip.
 Итак, архив содержит:
 папку out/production/p25/p25m/*.class
 папку src/p25m/*.java
 папку META-INF с файлом MANIFEST.MF

 -----------------------------------------------------------------------------------------------------------------------
 Создание исполняемого jar

 Необходимо расположить в текущей директории папку с откомилированными классами (.class), например,
 net/core/tutorial/elementary

 Если в архив надо включить сорцы, то надо расположить в текущей директории папку с исходным кодом, например,
 src/main/java/net/core/tutorial/elementary

 Необходимо расположить в текущей директории файл MANIFEST.MF со строкой:

 Main-Class: net.core.tutorial.elementary._15_CommandLine._02_CommandLine2

 Выполнить команду в командной строке:

 jar cvfm classes.jar MANIFEST.MF src/main/java/net/core/tutorial/elementary/* net/core/tutorial/elementary/*

 После создания архива для его запуска из командной строки необходимо выполнить:

 java -jar classes.jar

 Альтернативный способ: посли сборки JAR при помощи Maven изменить его расширение на .zip, войти в архив и
 отредактировать MANIFEST.MF, добавив строку Main-Class. Переименовать архив обратно в .jar. Теперь можно запускать
 его на выполнение из командной строки при помощи:

 java -jar classes.jar


 */

public class _02_CommandLine2 {

    public static void main(String[] args) {

        System.out.println("Simple message.");
    }
}
package net.core.tutorial.elementary._09_BitwiseAndBooleanOperators;

/**

 Булевы логические операции.

 Булевы логические операции применяются к булевым переменным/константам.

 ! булево отрицание NOT
 | булево ИЛИ по полной схеме
 & булево И по полной схеме
 ^ булева логическая операция XOR
 || булево ИЛИ по краткой схеме
 && булево И по краткой схеме

 Булевы операции !, &&, || нельзя применять к целочисленным константам/переменным.

 Приоритет булевых логических операций:
 !
 &
 ^
 |
 &&
 ||

 При сравнении булевых выражений при помощи short-circuit операторов || и && сравнение происходит слева направо
 (очерёдность сравнения может регулироваться при помощи скобок). Если первый операнд перед && равен false, то всё
 выражение равно false и второй операнд даже не рассматривается. Если в качестве второго операнда используется
 вызов метода, то метод не будет вызван. Аналогично, если первый операнд перед || равен true, то всё выражение
 равно true и второй операнд даже не рассматривается.

 При сравнении булевых выражений при помощи булевых операций И и ИЛИ по полной схеме в любом случае
 вычисляются все операнды.

 */

public class _03_BooleanOperators1 {

    public static void main(String[] args) {

        String str = null;

        if(true || divideOnZero()){
            System.out.println("Второй логический операнд не был задействован, метод не был вызван");
        }

        System.out.println("-------------------------");

        if(true | divideOnZero()){
            System.out.println("Второй логический операнд был задействован, метод был вызван");
        }

        System.out.println("-------------------------");
        System.out.println("-------------------------");

        if(!(false && str.isEmpty())){
            System.out.println("Второй логический операнд не был задействован, метод не был вызван");
        }

        System.out.println("-------------------------");

        try{
            if(!(false & str.isEmpty())){
                /*NOP*/
            }
        }
        catch (NullPointerException e){
            System.out.println("Возникло исключение NullPointerException");
        }
    }

    public static boolean divideOnZero() {

        int value = 100;
        try{
            int num = value/0;
        }
        catch (ArithmeticException e){
            System.out.println("Возникло исключение ArithmeticException");
        }
        System.out.println();
        return false;
    }
}
